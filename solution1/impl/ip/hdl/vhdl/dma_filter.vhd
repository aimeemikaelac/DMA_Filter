-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.1
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dma_filter is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_CONFIG_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_CONFIG_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_CONFIG_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_CONFIG_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_CONFIG_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_CONFIG_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_CONFIG_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_CONFIG_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_CONFIG_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_OUTPUT_CONFIG_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_CONFIG_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_CONFIG_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_output_config_AWVALID : OUT STD_LOGIC;
    m_axi_output_config_AWREADY : IN STD_LOGIC;
    m_axi_output_config_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_CONFIG_ADDR_WIDTH-1 downto 0);
    m_axi_output_config_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_CONFIG_ID_WIDTH-1 downto 0);
    m_axi_output_config_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_output_config_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_config_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_config_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_config_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_config_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_config_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_config_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_config_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_CONFIG_AWUSER_WIDTH-1 downto 0);
    m_axi_output_config_WVALID : OUT STD_LOGIC;
    m_axi_output_config_WREADY : IN STD_LOGIC;
    m_axi_output_config_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_CONFIG_DATA_WIDTH-1 downto 0);
    m_axi_output_config_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_CONFIG_DATA_WIDTH/8-1 downto 0);
    m_axi_output_config_WLAST : OUT STD_LOGIC;
    m_axi_output_config_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_CONFIG_ID_WIDTH-1 downto 0);
    m_axi_output_config_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_CONFIG_WUSER_WIDTH-1 downto 0);
    m_axi_output_config_ARVALID : OUT STD_LOGIC;
    m_axi_output_config_ARREADY : IN STD_LOGIC;
    m_axi_output_config_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_CONFIG_ADDR_WIDTH-1 downto 0);
    m_axi_output_config_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_CONFIG_ID_WIDTH-1 downto 0);
    m_axi_output_config_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_output_config_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_config_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_config_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_config_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_config_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_config_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_config_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_config_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_CONFIG_ARUSER_WIDTH-1 downto 0);
    m_axi_output_config_RVALID : IN STD_LOGIC;
    m_axi_output_config_RREADY : OUT STD_LOGIC;
    m_axi_output_config_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_CONFIG_DATA_WIDTH-1 downto 0);
    m_axi_output_config_RLAST : IN STD_LOGIC;
    m_axi_output_config_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_CONFIG_ID_WIDTH-1 downto 0);
    m_axi_output_config_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_CONFIG_RUSER_WIDTH-1 downto 0);
    m_axi_output_config_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_config_BVALID : IN STD_LOGIC;
    m_axi_output_config_BREADY : OUT STD_LOGIC;
    m_axi_output_config_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_config_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_CONFIG_ID_WIDTH-1 downto 0);
    m_axi_output_config_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_CONFIG_BUSER_WIDTH-1 downto 0);
    reset : IN STD_LOGIC );
end;


architecture behav of dma_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dma_filter,hls_ip_2014_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal minAddress : STD_LOGIC_VECTOR (31 downto 0);
    signal output_config_AWVALID : STD_LOGIC;
    signal output_config_AWREADY : STD_LOGIC;
    signal output_config_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal output_config_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal output_config_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal output_config_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal output_config_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal output_config_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal output_config_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal output_config_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal output_config_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal output_config_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal output_config_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal output_config_WVALID : STD_LOGIC;
    signal output_config_WREADY : STD_LOGIC;
    signal output_config_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal output_config_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal output_config_WLAST : STD_LOGIC;
    signal output_config_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal output_config_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal output_config_ARVALID : STD_LOGIC;
    signal output_config_ARREADY : STD_LOGIC;
    signal output_config_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal output_config_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal output_config_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal output_config_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal output_config_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal output_config_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal output_config_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal output_config_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal output_config_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal output_config_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal output_config_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal output_config_RVALID : STD_LOGIC;
    signal output_config_RREADY : STD_LOGIC;
    signal output_config_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal output_config_RLAST : STD_LOGIC;
    signal output_config_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal output_config_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal output_config_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal output_config_BVALID : STD_LOGIC;
    signal output_config_BREADY : STD_LOGIC;
    signal output_config_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal output_config_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal output_config_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);

    component dma_filter_AXILiteS_s_axi IS
    generic (
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        minAddress : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dma_filter_output_config_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_ID_WIDTH : INTEGER;
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER;
        C_AWUSER_WIDTH : INTEGER;
        C_ARUSER_WIDTH : INTEGER;
        C_WUSER_WIDTH : INTEGER;
        C_RUSER_WIDTH : INTEGER;
        C_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    dma_filter_AXILiteS_s_axi_U : component dma_filter_AXILiteS_s_axi
    generic map (
        C_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        minAddress => minAddress);

    dma_filter_output_config_m_axi_U : component dma_filter_output_config_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 2,
        C_ID_WIDTH => C_M_AXI_OUTPUT_CONFIG_ID_WIDTH,
        C_ADDR_WIDTH => C_M_AXI_OUTPUT_CONFIG_ADDR_WIDTH,
        C_DATA_WIDTH => C_M_AXI_OUTPUT_CONFIG_DATA_WIDTH,
        C_AWUSER_WIDTH => C_M_AXI_OUTPUT_CONFIG_AWUSER_WIDTH,
        C_ARUSER_WIDTH => C_M_AXI_OUTPUT_CONFIG_ARUSER_WIDTH,
        C_WUSER_WIDTH => C_M_AXI_OUTPUT_CONFIG_WUSER_WIDTH,
        C_RUSER_WIDTH => C_M_AXI_OUTPUT_CONFIG_RUSER_WIDTH,
        C_BUSER_WIDTH => C_M_AXI_OUTPUT_CONFIG_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_OUTPUT_CONFIG_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_OUTPUT_CONFIG_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUTPUT_CONFIG_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUTPUT_CONFIG_CACHE_VALUE)
    port map (
        AWVALID => m_axi_output_config_AWVALID,
        AWREADY => m_axi_output_config_AWREADY,
        AWADDR => m_axi_output_config_AWADDR,
        AWID => m_axi_output_config_AWID,
        AWLEN => m_axi_output_config_AWLEN,
        AWSIZE => m_axi_output_config_AWSIZE,
        AWBURST => m_axi_output_config_AWBURST,
        AWLOCK => m_axi_output_config_AWLOCK,
        AWCACHE => m_axi_output_config_AWCACHE,
        AWPROT => m_axi_output_config_AWPROT,
        AWQOS => m_axi_output_config_AWQOS,
        AWREGION => m_axi_output_config_AWREGION,
        AWUSER => m_axi_output_config_AWUSER,
        WVALID => m_axi_output_config_WVALID,
        WREADY => m_axi_output_config_WREADY,
        WDATA => m_axi_output_config_WDATA,
        WSTRB => m_axi_output_config_WSTRB,
        WLAST => m_axi_output_config_WLAST,
        WID => m_axi_output_config_WID,
        WUSER => m_axi_output_config_WUSER,
        ARVALID => m_axi_output_config_ARVALID,
        ARREADY => m_axi_output_config_ARREADY,
        ARADDR => m_axi_output_config_ARADDR,
        ARID => m_axi_output_config_ARID,
        ARLEN => m_axi_output_config_ARLEN,
        ARSIZE => m_axi_output_config_ARSIZE,
        ARBURST => m_axi_output_config_ARBURST,
        ARLOCK => m_axi_output_config_ARLOCK,
        ARCACHE => m_axi_output_config_ARCACHE,
        ARPROT => m_axi_output_config_ARPROT,
        ARQOS => m_axi_output_config_ARQOS,
        ARREGION => m_axi_output_config_ARREGION,
        ARUSER => m_axi_output_config_ARUSER,
        RVALID => m_axi_output_config_RVALID,
        RREADY => m_axi_output_config_RREADY,
        RDATA => m_axi_output_config_RDATA,
        RLAST => m_axi_output_config_RLAST,
        RID => m_axi_output_config_RID,
        RUSER => m_axi_output_config_RUSER,
        RRESP => m_axi_output_config_RRESP,
        BVALID => m_axi_output_config_BVALID,
        BREADY => m_axi_output_config_BREADY,
        BRESP => m_axi_output_config_BRESP,
        BID => m_axi_output_config_BID,
        BUSER => m_axi_output_config_BUSER,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        I_ARVALID => output_config_ARVALID,
        I_ARREADY => output_config_ARREADY,
        I_ARADDR => output_config_ARADDR,
        I_ARID => output_config_ARID,
        I_ARLEN => output_config_ARLEN,
        I_ARSIZE => output_config_ARSIZE,
        I_ARLOCK => output_config_ARLOCK,
        I_ARCACHE => output_config_ARCACHE,
        I_ARQOS => output_config_ARQOS,
        I_ARPROT => output_config_ARPROT,
        I_ARUSER => output_config_ARUSER,
        I_ARBURST => output_config_ARBURST,
        I_ARREGION => output_config_ARREGION,
        I_RVALID => output_config_RVALID,
        I_RREADY => output_config_RREADY,
        I_RDATA => output_config_RDATA,
        I_RID => output_config_RID,
        I_RUSER => output_config_RUSER,
        I_RRESP => output_config_RRESP,
        I_RLAST => output_config_RLAST,
        I_AWVALID => output_config_AWVALID,
        I_AWREADY => output_config_AWREADY,
        I_AWADDR => output_config_AWADDR,
        I_AWID => output_config_AWID,
        I_AWLEN => output_config_AWLEN,
        I_AWSIZE => output_config_AWSIZE,
        I_AWLOCK => output_config_AWLOCK,
        I_AWCACHE => output_config_AWCACHE,
        I_AWQOS => output_config_AWQOS,
        I_AWPROT => output_config_AWPROT,
        I_AWUSER => output_config_AWUSER,
        I_AWBURST => output_config_AWBURST,
        I_AWREGION => output_config_AWREGION,
        I_WVALID => output_config_WVALID,
        I_WREADY => output_config_WREADY,
        I_WDATA => output_config_WDATA,
        I_WID => output_config_WID,
        I_WUSER => output_config_WUSER,
        I_WLAST => output_config_WLAST,
        I_WSTRB => output_config_WSTRB,
        I_BVALID => output_config_BVALID,
        I_BREADY => output_config_BREADY,
        I_BRESP => output_config_BRESP,
        I_BID => output_config_BID,
        I_BUSER => output_config_BUSER);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    output_config_ARADDR <= ap_const_lv32_0;
    output_config_ARBURST <= ap_const_lv2_0;
    output_config_ARCACHE <= ap_const_lv4_0;
    output_config_ARID <= ap_const_lv1_0;
    output_config_ARLEN <= ap_const_lv32_0;
    output_config_ARLOCK <= ap_const_lv2_0;
    output_config_ARPROT <= ap_const_lv3_0;
    output_config_ARQOS <= ap_const_lv4_0;
    output_config_ARREGION <= ap_const_lv4_0;
    output_config_ARSIZE <= ap_const_lv3_0;
    output_config_ARUSER <= ap_const_lv1_0;
    output_config_ARVALID <= ap_const_logic_0;
    output_config_AWADDR <= ap_const_lv32_0;
    output_config_AWBURST <= ap_const_lv2_0;
    output_config_AWCACHE <= ap_const_lv4_0;
    output_config_AWID <= ap_const_lv1_0;
    output_config_AWLEN <= ap_const_lv32_0;
    output_config_AWLOCK <= ap_const_lv2_0;
    output_config_AWPROT <= ap_const_lv3_0;
    output_config_AWQOS <= ap_const_lv4_0;
    output_config_AWREGION <= ap_const_lv4_0;
    output_config_AWSIZE <= ap_const_lv3_0;
    output_config_AWUSER <= ap_const_lv1_0;
    output_config_AWVALID <= ap_const_logic_0;
    output_config_BREADY <= ap_const_logic_0;
    output_config_RREADY <= ap_const_logic_0;
    output_config_WDATA <= ap_const_lv32_0;
    output_config_WID <= ap_const_lv1_0;
    output_config_WLAST <= ap_const_logic_0;
    output_config_WSTRB <= ap_const_lv4_0;
    output_config_WUSER <= ap_const_lv1_0;
    output_config_WVALID <= ap_const_logic_0;
end behav;
