// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "dma_filter.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic dma_filter::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic dma_filter::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> dma_filter::ap_ST_st1_fsm_0 = "0";
const int dma_filter::C_DATA_WIDTH = "100000";
const int dma_filter::C_M_AXI_OUTPUT_CONFIG_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int dma_filter::C_M_AXI_OUTPUT_CONFIG_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int dma_filter::C_M_AXI_OUTPUT_CONFIG_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int dma_filter::C_M_AXI_OUTPUT_CONFIG_CACHE_VALUE = "11";
const sc_lv<32> dma_filter::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> dma_filter::ap_const_lv1_0 = "0";
const sc_lv<3> dma_filter::ap_const_lv3_0 = "000";
const sc_lv<2> dma_filter::ap_const_lv2_0 = "00";
const sc_lv<4> dma_filter::ap_const_lv4_0 = "0000";

dma_filter::dma_filter(sc_module_name name) : sc_module(name), mVcdFile(0) {
    dma_filter_AXILiteS_s_axi_U = new dma_filter_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("dma_filter_AXILiteS_s_axi_U");
    dma_filter_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    dma_filter_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    dma_filter_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    dma_filter_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    dma_filter_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    dma_filter_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    dma_filter_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    dma_filter_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    dma_filter_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    dma_filter_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    dma_filter_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    dma_filter_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    dma_filter_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    dma_filter_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    dma_filter_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    dma_filter_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    dma_filter_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    dma_filter_AXILiteS_s_axi_U->ACLK(ap_clk);
    dma_filter_AXILiteS_s_axi_U->ARESETN(ap_rst_n);
    dma_filter_AXILiteS_s_axi_U->minAddress(minAddress);
    dma_filter_output_config_m_axi_U = new dma_filter_output_config_m_axi<32,32,2,C_M_AXI_OUTPUT_CONFIG_ID_WIDTH,C_M_AXI_OUTPUT_CONFIG_ADDR_WIDTH,C_M_AXI_OUTPUT_CONFIG_DATA_WIDTH,C_M_AXI_OUTPUT_CONFIG_AWUSER_WIDTH,C_M_AXI_OUTPUT_CONFIG_ARUSER_WIDTH,C_M_AXI_OUTPUT_CONFIG_WUSER_WIDTH,C_M_AXI_OUTPUT_CONFIG_RUSER_WIDTH,C_M_AXI_OUTPUT_CONFIG_BUSER_WIDTH,C_M_AXI_OUTPUT_CONFIG_TARGET_ADDR,C_M_AXI_OUTPUT_CONFIG_USER_VALUE,C_M_AXI_OUTPUT_CONFIG_PROT_VALUE,C_M_AXI_OUTPUT_CONFIG_CACHE_VALUE>("dma_filter_output_config_m_axi_U");
    dma_filter_output_config_m_axi_U->AWVALID(m_axi_output_config_AWVALID);
    dma_filter_output_config_m_axi_U->AWREADY(m_axi_output_config_AWREADY);
    dma_filter_output_config_m_axi_U->AWADDR(m_axi_output_config_AWADDR);
    dma_filter_output_config_m_axi_U->AWID(m_axi_output_config_AWID);
    dma_filter_output_config_m_axi_U->AWLEN(m_axi_output_config_AWLEN);
    dma_filter_output_config_m_axi_U->AWSIZE(m_axi_output_config_AWSIZE);
    dma_filter_output_config_m_axi_U->AWBURST(m_axi_output_config_AWBURST);
    dma_filter_output_config_m_axi_U->AWLOCK(m_axi_output_config_AWLOCK);
    dma_filter_output_config_m_axi_U->AWCACHE(m_axi_output_config_AWCACHE);
    dma_filter_output_config_m_axi_U->AWPROT(m_axi_output_config_AWPROT);
    dma_filter_output_config_m_axi_U->AWQOS(m_axi_output_config_AWQOS);
    dma_filter_output_config_m_axi_U->AWREGION(m_axi_output_config_AWREGION);
    dma_filter_output_config_m_axi_U->AWUSER(m_axi_output_config_AWUSER);
    dma_filter_output_config_m_axi_U->WVALID(m_axi_output_config_WVALID);
    dma_filter_output_config_m_axi_U->WREADY(m_axi_output_config_WREADY);
    dma_filter_output_config_m_axi_U->WDATA(m_axi_output_config_WDATA);
    dma_filter_output_config_m_axi_U->WSTRB(m_axi_output_config_WSTRB);
    dma_filter_output_config_m_axi_U->WLAST(m_axi_output_config_WLAST);
    dma_filter_output_config_m_axi_U->WID(m_axi_output_config_WID);
    dma_filter_output_config_m_axi_U->WUSER(m_axi_output_config_WUSER);
    dma_filter_output_config_m_axi_U->ARVALID(m_axi_output_config_ARVALID);
    dma_filter_output_config_m_axi_U->ARREADY(m_axi_output_config_ARREADY);
    dma_filter_output_config_m_axi_U->ARADDR(m_axi_output_config_ARADDR);
    dma_filter_output_config_m_axi_U->ARID(m_axi_output_config_ARID);
    dma_filter_output_config_m_axi_U->ARLEN(m_axi_output_config_ARLEN);
    dma_filter_output_config_m_axi_U->ARSIZE(m_axi_output_config_ARSIZE);
    dma_filter_output_config_m_axi_U->ARBURST(m_axi_output_config_ARBURST);
    dma_filter_output_config_m_axi_U->ARLOCK(m_axi_output_config_ARLOCK);
    dma_filter_output_config_m_axi_U->ARCACHE(m_axi_output_config_ARCACHE);
    dma_filter_output_config_m_axi_U->ARPROT(m_axi_output_config_ARPROT);
    dma_filter_output_config_m_axi_U->ARQOS(m_axi_output_config_ARQOS);
    dma_filter_output_config_m_axi_U->ARREGION(m_axi_output_config_ARREGION);
    dma_filter_output_config_m_axi_U->ARUSER(m_axi_output_config_ARUSER);
    dma_filter_output_config_m_axi_U->RVALID(m_axi_output_config_RVALID);
    dma_filter_output_config_m_axi_U->RREADY(m_axi_output_config_RREADY);
    dma_filter_output_config_m_axi_U->RDATA(m_axi_output_config_RDATA);
    dma_filter_output_config_m_axi_U->RLAST(m_axi_output_config_RLAST);
    dma_filter_output_config_m_axi_U->RID(m_axi_output_config_RID);
    dma_filter_output_config_m_axi_U->RUSER(m_axi_output_config_RUSER);
    dma_filter_output_config_m_axi_U->RRESP(m_axi_output_config_RRESP);
    dma_filter_output_config_m_axi_U->BVALID(m_axi_output_config_BVALID);
    dma_filter_output_config_m_axi_U->BREADY(m_axi_output_config_BREADY);
    dma_filter_output_config_m_axi_U->BRESP(m_axi_output_config_BRESP);
    dma_filter_output_config_m_axi_U->BID(m_axi_output_config_BID);
    dma_filter_output_config_m_axi_U->BUSER(m_axi_output_config_BUSER);
    dma_filter_output_config_m_axi_U->ACLK(ap_clk);
    dma_filter_output_config_m_axi_U->ARESETN(ap_rst_n);
    dma_filter_output_config_m_axi_U->I_ARVALID(output_config_ARVALID);
    dma_filter_output_config_m_axi_U->I_ARREADY(output_config_ARREADY);
    dma_filter_output_config_m_axi_U->I_ARADDR(output_config_ARADDR);
    dma_filter_output_config_m_axi_U->I_ARID(output_config_ARID);
    dma_filter_output_config_m_axi_U->I_ARLEN(output_config_ARLEN);
    dma_filter_output_config_m_axi_U->I_ARSIZE(output_config_ARSIZE);
    dma_filter_output_config_m_axi_U->I_ARLOCK(output_config_ARLOCK);
    dma_filter_output_config_m_axi_U->I_ARCACHE(output_config_ARCACHE);
    dma_filter_output_config_m_axi_U->I_ARQOS(output_config_ARQOS);
    dma_filter_output_config_m_axi_U->I_ARPROT(output_config_ARPROT);
    dma_filter_output_config_m_axi_U->I_ARUSER(output_config_ARUSER);
    dma_filter_output_config_m_axi_U->I_ARBURST(output_config_ARBURST);
    dma_filter_output_config_m_axi_U->I_ARREGION(output_config_ARREGION);
    dma_filter_output_config_m_axi_U->I_RVALID(output_config_RVALID);
    dma_filter_output_config_m_axi_U->I_RREADY(output_config_RREADY);
    dma_filter_output_config_m_axi_U->I_RDATA(output_config_RDATA);
    dma_filter_output_config_m_axi_U->I_RID(output_config_RID);
    dma_filter_output_config_m_axi_U->I_RUSER(output_config_RUSER);
    dma_filter_output_config_m_axi_U->I_RRESP(output_config_RRESP);
    dma_filter_output_config_m_axi_U->I_RLAST(output_config_RLAST);
    dma_filter_output_config_m_axi_U->I_AWVALID(output_config_AWVALID);
    dma_filter_output_config_m_axi_U->I_AWREADY(output_config_AWREADY);
    dma_filter_output_config_m_axi_U->I_AWADDR(output_config_AWADDR);
    dma_filter_output_config_m_axi_U->I_AWID(output_config_AWID);
    dma_filter_output_config_m_axi_U->I_AWLEN(output_config_AWLEN);
    dma_filter_output_config_m_axi_U->I_AWSIZE(output_config_AWSIZE);
    dma_filter_output_config_m_axi_U->I_AWLOCK(output_config_AWLOCK);
    dma_filter_output_config_m_axi_U->I_AWCACHE(output_config_AWCACHE);
    dma_filter_output_config_m_axi_U->I_AWQOS(output_config_AWQOS);
    dma_filter_output_config_m_axi_U->I_AWPROT(output_config_AWPROT);
    dma_filter_output_config_m_axi_U->I_AWUSER(output_config_AWUSER);
    dma_filter_output_config_m_axi_U->I_AWBURST(output_config_AWBURST);
    dma_filter_output_config_m_axi_U->I_AWREGION(output_config_AWREGION);
    dma_filter_output_config_m_axi_U->I_WVALID(output_config_WVALID);
    dma_filter_output_config_m_axi_U->I_WREADY(output_config_WREADY);
    dma_filter_output_config_m_axi_U->I_WDATA(output_config_WDATA);
    dma_filter_output_config_m_axi_U->I_WID(output_config_WID);
    dma_filter_output_config_m_axi_U->I_WUSER(output_config_WUSER);
    dma_filter_output_config_m_axi_U->I_WLAST(output_config_WLAST);
    dma_filter_output_config_m_axi_U->I_WSTRB(output_config_WSTRB);
    dma_filter_output_config_m_axi_U->I_BVALID(output_config_BVALID);
    dma_filter_output_config_m_axi_U->I_BREADY(output_config_BREADY);
    dma_filter_output_config_m_axi_U->I_BRESP(output_config_BRESP);
    dma_filter_output_config_m_axi_U->I_BID(output_config_BID);
    dma_filter_output_config_m_axi_U->I_BUSER(output_config_BUSER);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_output_config_ARADDR);

    SC_METHOD(thread_output_config_ARBURST);

    SC_METHOD(thread_output_config_ARCACHE);

    SC_METHOD(thread_output_config_ARID);

    SC_METHOD(thread_output_config_ARLEN);

    SC_METHOD(thread_output_config_ARLOCK);

    SC_METHOD(thread_output_config_ARPROT);

    SC_METHOD(thread_output_config_ARQOS);

    SC_METHOD(thread_output_config_ARREGION);

    SC_METHOD(thread_output_config_ARSIZE);

    SC_METHOD(thread_output_config_ARUSER);

    SC_METHOD(thread_output_config_ARVALID);

    SC_METHOD(thread_output_config_AWADDR);

    SC_METHOD(thread_output_config_AWBURST);

    SC_METHOD(thread_output_config_AWCACHE);

    SC_METHOD(thread_output_config_AWID);

    SC_METHOD(thread_output_config_AWLEN);

    SC_METHOD(thread_output_config_AWLOCK);

    SC_METHOD(thread_output_config_AWPROT);

    SC_METHOD(thread_output_config_AWQOS);

    SC_METHOD(thread_output_config_AWREGION);

    SC_METHOD(thread_output_config_AWSIZE);

    SC_METHOD(thread_output_config_AWUSER);

    SC_METHOD(thread_output_config_AWVALID);

    SC_METHOD(thread_output_config_BREADY);

    SC_METHOD(thread_output_config_RREADY);

    SC_METHOD(thread_output_config_WDATA);

    SC_METHOD(thread_output_config_WID);

    SC_METHOD(thread_output_config_WLAST);

    SC_METHOD(thread_output_config_WSTRB);

    SC_METHOD(thread_output_config_WUSER);

    SC_METHOD(thread_output_config_WVALID);

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "dma_filter_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_output_config_AWVALID, "(port)m_axi_output_config_AWVALID");
    sc_trace(mVcdFile, m_axi_output_config_AWREADY, "(port)m_axi_output_config_AWREADY");
    sc_trace(mVcdFile, m_axi_output_config_AWADDR, "(port)m_axi_output_config_AWADDR");
    sc_trace(mVcdFile, m_axi_output_config_AWID, "(port)m_axi_output_config_AWID");
    sc_trace(mVcdFile, m_axi_output_config_AWLEN, "(port)m_axi_output_config_AWLEN");
    sc_trace(mVcdFile, m_axi_output_config_AWSIZE, "(port)m_axi_output_config_AWSIZE");
    sc_trace(mVcdFile, m_axi_output_config_AWBURST, "(port)m_axi_output_config_AWBURST");
    sc_trace(mVcdFile, m_axi_output_config_AWLOCK, "(port)m_axi_output_config_AWLOCK");
    sc_trace(mVcdFile, m_axi_output_config_AWCACHE, "(port)m_axi_output_config_AWCACHE");
    sc_trace(mVcdFile, m_axi_output_config_AWPROT, "(port)m_axi_output_config_AWPROT");
    sc_trace(mVcdFile, m_axi_output_config_AWQOS, "(port)m_axi_output_config_AWQOS");
    sc_trace(mVcdFile, m_axi_output_config_AWREGION, "(port)m_axi_output_config_AWREGION");
    sc_trace(mVcdFile, m_axi_output_config_AWUSER, "(port)m_axi_output_config_AWUSER");
    sc_trace(mVcdFile, m_axi_output_config_WVALID, "(port)m_axi_output_config_WVALID");
    sc_trace(mVcdFile, m_axi_output_config_WREADY, "(port)m_axi_output_config_WREADY");
    sc_trace(mVcdFile, m_axi_output_config_WDATA, "(port)m_axi_output_config_WDATA");
    sc_trace(mVcdFile, m_axi_output_config_WSTRB, "(port)m_axi_output_config_WSTRB");
    sc_trace(mVcdFile, m_axi_output_config_WLAST, "(port)m_axi_output_config_WLAST");
    sc_trace(mVcdFile, m_axi_output_config_WID, "(port)m_axi_output_config_WID");
    sc_trace(mVcdFile, m_axi_output_config_WUSER, "(port)m_axi_output_config_WUSER");
    sc_trace(mVcdFile, m_axi_output_config_ARVALID, "(port)m_axi_output_config_ARVALID");
    sc_trace(mVcdFile, m_axi_output_config_ARREADY, "(port)m_axi_output_config_ARREADY");
    sc_trace(mVcdFile, m_axi_output_config_ARADDR, "(port)m_axi_output_config_ARADDR");
    sc_trace(mVcdFile, m_axi_output_config_ARID, "(port)m_axi_output_config_ARID");
    sc_trace(mVcdFile, m_axi_output_config_ARLEN, "(port)m_axi_output_config_ARLEN");
    sc_trace(mVcdFile, m_axi_output_config_ARSIZE, "(port)m_axi_output_config_ARSIZE");
    sc_trace(mVcdFile, m_axi_output_config_ARBURST, "(port)m_axi_output_config_ARBURST");
    sc_trace(mVcdFile, m_axi_output_config_ARLOCK, "(port)m_axi_output_config_ARLOCK");
    sc_trace(mVcdFile, m_axi_output_config_ARCACHE, "(port)m_axi_output_config_ARCACHE");
    sc_trace(mVcdFile, m_axi_output_config_ARPROT, "(port)m_axi_output_config_ARPROT");
    sc_trace(mVcdFile, m_axi_output_config_ARQOS, "(port)m_axi_output_config_ARQOS");
    sc_trace(mVcdFile, m_axi_output_config_ARREGION, "(port)m_axi_output_config_ARREGION");
    sc_trace(mVcdFile, m_axi_output_config_ARUSER, "(port)m_axi_output_config_ARUSER");
    sc_trace(mVcdFile, m_axi_output_config_RVALID, "(port)m_axi_output_config_RVALID");
    sc_trace(mVcdFile, m_axi_output_config_RREADY, "(port)m_axi_output_config_RREADY");
    sc_trace(mVcdFile, m_axi_output_config_RDATA, "(port)m_axi_output_config_RDATA");
    sc_trace(mVcdFile, m_axi_output_config_RLAST, "(port)m_axi_output_config_RLAST");
    sc_trace(mVcdFile, m_axi_output_config_RID, "(port)m_axi_output_config_RID");
    sc_trace(mVcdFile, m_axi_output_config_RUSER, "(port)m_axi_output_config_RUSER");
    sc_trace(mVcdFile, m_axi_output_config_RRESP, "(port)m_axi_output_config_RRESP");
    sc_trace(mVcdFile, m_axi_output_config_BVALID, "(port)m_axi_output_config_BVALID");
    sc_trace(mVcdFile, m_axi_output_config_BREADY, "(port)m_axi_output_config_BREADY");
    sc_trace(mVcdFile, m_axi_output_config_BRESP, "(port)m_axi_output_config_BRESP");
    sc_trace(mVcdFile, m_axi_output_config_BID, "(port)m_axi_output_config_BID");
    sc_trace(mVcdFile, m_axi_output_config_BUSER, "(port)m_axi_output_config_BUSER");
    sc_trace(mVcdFile, reset, "(port)reset");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, minAddress, "minAddress");
    sc_trace(mVcdFile, output_config_AWVALID, "output_config_AWVALID");
    sc_trace(mVcdFile, output_config_AWREADY, "output_config_AWREADY");
    sc_trace(mVcdFile, output_config_AWADDR, "output_config_AWADDR");
    sc_trace(mVcdFile, output_config_AWID, "output_config_AWID");
    sc_trace(mVcdFile, output_config_AWLEN, "output_config_AWLEN");
    sc_trace(mVcdFile, output_config_AWSIZE, "output_config_AWSIZE");
    sc_trace(mVcdFile, output_config_AWBURST, "output_config_AWBURST");
    sc_trace(mVcdFile, output_config_AWLOCK, "output_config_AWLOCK");
    sc_trace(mVcdFile, output_config_AWCACHE, "output_config_AWCACHE");
    sc_trace(mVcdFile, output_config_AWPROT, "output_config_AWPROT");
    sc_trace(mVcdFile, output_config_AWQOS, "output_config_AWQOS");
    sc_trace(mVcdFile, output_config_AWREGION, "output_config_AWREGION");
    sc_trace(mVcdFile, output_config_AWUSER, "output_config_AWUSER");
    sc_trace(mVcdFile, output_config_WVALID, "output_config_WVALID");
    sc_trace(mVcdFile, output_config_WREADY, "output_config_WREADY");
    sc_trace(mVcdFile, output_config_WDATA, "output_config_WDATA");
    sc_trace(mVcdFile, output_config_WSTRB, "output_config_WSTRB");
    sc_trace(mVcdFile, output_config_WLAST, "output_config_WLAST");
    sc_trace(mVcdFile, output_config_WID, "output_config_WID");
    sc_trace(mVcdFile, output_config_WUSER, "output_config_WUSER");
    sc_trace(mVcdFile, output_config_ARVALID, "output_config_ARVALID");
    sc_trace(mVcdFile, output_config_ARREADY, "output_config_ARREADY");
    sc_trace(mVcdFile, output_config_ARADDR, "output_config_ARADDR");
    sc_trace(mVcdFile, output_config_ARID, "output_config_ARID");
    sc_trace(mVcdFile, output_config_ARLEN, "output_config_ARLEN");
    sc_trace(mVcdFile, output_config_ARSIZE, "output_config_ARSIZE");
    sc_trace(mVcdFile, output_config_ARBURST, "output_config_ARBURST");
    sc_trace(mVcdFile, output_config_ARLOCK, "output_config_ARLOCK");
    sc_trace(mVcdFile, output_config_ARCACHE, "output_config_ARCACHE");
    sc_trace(mVcdFile, output_config_ARPROT, "output_config_ARPROT");
    sc_trace(mVcdFile, output_config_ARQOS, "output_config_ARQOS");
    sc_trace(mVcdFile, output_config_ARREGION, "output_config_ARREGION");
    sc_trace(mVcdFile, output_config_ARUSER, "output_config_ARUSER");
    sc_trace(mVcdFile, output_config_RVALID, "output_config_RVALID");
    sc_trace(mVcdFile, output_config_RREADY, "output_config_RREADY");
    sc_trace(mVcdFile, output_config_RDATA, "output_config_RDATA");
    sc_trace(mVcdFile, output_config_RLAST, "output_config_RLAST");
    sc_trace(mVcdFile, output_config_RID, "output_config_RID");
    sc_trace(mVcdFile, output_config_RUSER, "output_config_RUSER");
    sc_trace(mVcdFile, output_config_RRESP, "output_config_RRESP");
    sc_trace(mVcdFile, output_config_BVALID, "output_config_BVALID");
    sc_trace(mVcdFile, output_config_BREADY, "output_config_BREADY");
    sc_trace(mVcdFile, output_config_BRESP, "output_config_BRESP");
    sc_trace(mVcdFile, output_config_BID, "output_config_BID");
    sc_trace(mVcdFile, output_config_BUSER, "output_config_BUSER");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("dma_filter.hdltvin.dat");
    mHdltvoutHandle.open("dma_filter.hdltvout.dat");
}

dma_filter::~dma_filter() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete dma_filter_AXILiteS_s_axi_U;
    delete dma_filter_output_config_m_axi_U;
}

void dma_filter::thread_ap_clk_no_reset_() {
    if ( ap_rst_n.read() == ap_const_logic_0) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
}

void dma_filter::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void dma_filter::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void dma_filter::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void dma_filter::thread_output_config_ARADDR() {
    output_config_ARADDR = ap_const_lv32_0;
}

void dma_filter::thread_output_config_ARBURST() {
    output_config_ARBURST = ap_const_lv2_0;
}

void dma_filter::thread_output_config_ARCACHE() {
    output_config_ARCACHE = ap_const_lv4_0;
}

void dma_filter::thread_output_config_ARID() {
    output_config_ARID = ap_const_lv1_0;
}

void dma_filter::thread_output_config_ARLEN() {
    output_config_ARLEN = ap_const_lv32_0;
}

void dma_filter::thread_output_config_ARLOCK() {
    output_config_ARLOCK = ap_const_lv2_0;
}

void dma_filter::thread_output_config_ARPROT() {
    output_config_ARPROT = ap_const_lv3_0;
}

void dma_filter::thread_output_config_ARQOS() {
    output_config_ARQOS = ap_const_lv4_0;
}

void dma_filter::thread_output_config_ARREGION() {
    output_config_ARREGION = ap_const_lv4_0;
}

void dma_filter::thread_output_config_ARSIZE() {
    output_config_ARSIZE = ap_const_lv3_0;
}

void dma_filter::thread_output_config_ARUSER() {
    output_config_ARUSER = ap_const_lv1_0;
}

void dma_filter::thread_output_config_ARVALID() {
    output_config_ARVALID = ap_const_logic_0;
}

void dma_filter::thread_output_config_AWADDR() {
    output_config_AWADDR = ap_const_lv32_0;
}

void dma_filter::thread_output_config_AWBURST() {
    output_config_AWBURST = ap_const_lv2_0;
}

void dma_filter::thread_output_config_AWCACHE() {
    output_config_AWCACHE = ap_const_lv4_0;
}

void dma_filter::thread_output_config_AWID() {
    output_config_AWID = ap_const_lv1_0;
}

void dma_filter::thread_output_config_AWLEN() {
    output_config_AWLEN = ap_const_lv32_0;
}

void dma_filter::thread_output_config_AWLOCK() {
    output_config_AWLOCK = ap_const_lv2_0;
}

void dma_filter::thread_output_config_AWPROT() {
    output_config_AWPROT = ap_const_lv3_0;
}

void dma_filter::thread_output_config_AWQOS() {
    output_config_AWQOS = ap_const_lv4_0;
}

void dma_filter::thread_output_config_AWREGION() {
    output_config_AWREGION = ap_const_lv4_0;
}

void dma_filter::thread_output_config_AWSIZE() {
    output_config_AWSIZE = ap_const_lv3_0;
}

void dma_filter::thread_output_config_AWUSER() {
    output_config_AWUSER = ap_const_lv1_0;
}

void dma_filter::thread_output_config_AWVALID() {
    output_config_AWVALID = ap_const_logic_0;
}

void dma_filter::thread_output_config_BREADY() {
    output_config_BREADY = ap_const_logic_0;
}

void dma_filter::thread_output_config_RREADY() {
    output_config_RREADY = ap_const_logic_0;
}

void dma_filter::thread_output_config_WDATA() {
    output_config_WDATA = ap_const_lv32_0;
}

void dma_filter::thread_output_config_WID() {
    output_config_WID = ap_const_lv1_0;
}

void dma_filter::thread_output_config_WLAST() {
    output_config_WLAST = ap_const_logic_0;
}

void dma_filter::thread_output_config_WSTRB() {
    output_config_WSTRB = ap_const_lv4_0;
}

void dma_filter::thread_output_config_WUSER() {
    output_config_WUSER = ap_const_lv1_0;
}

void dma_filter::thread_output_config_WVALID() {
    output_config_WVALID = ap_const_logic_0;
}

void dma_filter::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint()) {
        case 0 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}
void dma_filter::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_AWVALID\" :  \"" << m_axi_output_config_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_config_AWREADY\" :  \"" << m_axi_output_config_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_AWADDR\" :  \"" << m_axi_output_config_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_AWID\" :  \"" << m_axi_output_config_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_AWLEN\" :  \"" << m_axi_output_config_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_AWSIZE\" :  \"" << m_axi_output_config_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_AWBURST\" :  \"" << m_axi_output_config_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_AWLOCK\" :  \"" << m_axi_output_config_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_AWCACHE\" :  \"" << m_axi_output_config_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_AWPROT\" :  \"" << m_axi_output_config_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_AWQOS\" :  \"" << m_axi_output_config_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_AWREGION\" :  \"" << m_axi_output_config_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_AWUSER\" :  \"" << m_axi_output_config_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_WVALID\" :  \"" << m_axi_output_config_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_config_WREADY\" :  \"" << m_axi_output_config_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_WDATA\" :  \"" << m_axi_output_config_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_WSTRB\" :  \"" << m_axi_output_config_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_WLAST\" :  \"" << m_axi_output_config_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_WID\" :  \"" << m_axi_output_config_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_WUSER\" :  \"" << m_axi_output_config_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_ARVALID\" :  \"" << m_axi_output_config_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_config_ARREADY\" :  \"" << m_axi_output_config_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_ARADDR\" :  \"" << m_axi_output_config_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_ARID\" :  \"" << m_axi_output_config_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_ARLEN\" :  \"" << m_axi_output_config_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_ARSIZE\" :  \"" << m_axi_output_config_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_ARBURST\" :  \"" << m_axi_output_config_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_ARLOCK\" :  \"" << m_axi_output_config_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_ARCACHE\" :  \"" << m_axi_output_config_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_ARPROT\" :  \"" << m_axi_output_config_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_ARQOS\" :  \"" << m_axi_output_config_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_ARREGION\" :  \"" << m_axi_output_config_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_ARUSER\" :  \"" << m_axi_output_config_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_config_RVALID\" :  \"" << m_axi_output_config_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_RREADY\" :  \"" << m_axi_output_config_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_config_RDATA\" :  \"" << m_axi_output_config_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_config_RLAST\" :  \"" << m_axi_output_config_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_config_RID\" :  \"" << m_axi_output_config_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_config_RUSER\" :  \"" << m_axi_output_config_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_config_RRESP\" :  \"" << m_axi_output_config_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_config_BVALID\" :  \"" << m_axi_output_config_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_config_BREADY\" :  \"" << m_axi_output_config_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_config_BRESP\" :  \"" << m_axi_output_config_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_config_BID\" :  \"" << m_axi_output_config_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_config_BUSER\" :  \"" << m_axi_output_config_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"reset\" :  \"" << reset.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

